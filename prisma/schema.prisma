// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Article {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  creator        String? @default("RSS Feed")
  title          String
  link           String?
  pubDate        String?
  dcCreator      String?
  content        String
  contentSnippet String?
  guid           String?
  isoDate        String?
  thumbnail      String?

  categories  String[]
  favicon     String?
  websiteName String?

  contentEncoded String? @map("content_encoded")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Website   Website? @relation(fields: [websiteId], references: [id])
  websiteId String?  @db.ObjectId
}

model Website {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  url         String    @unique
  favicon     String?
  rssUrl      String?
  language    String?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category    String[]
  articles    Article[]
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  username       String?
  image          String?
  email          String?        @unique
  emailVerified  DateTime?
  hashedPassword String?
  createdAt      DateTime       @default(now())
  updateAt       DateTime       @updatedAt
  sessions       Session[]
  accounts       Account[]
  Notification   Notification[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Notification {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  title   String
  message String
  type    NotificationType @default(GENERAL)
  read    Boolean          @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum NotificationType {
  GENERAL
  SYSTEM
  SUCCESS
  WARNING
  ERROR
  INFO
}
